
//================== Day1-01-Vue3小兔鮮先導課
Vue3 全家桶
Create-vue
Pinia
ElementPlus
Vue3+Setup
Vue-Router
VueUse
項目亮點：
基於業務邏輯的組件拆分思想
長面頁吸頂交互實現
圖片懶加載指令封裝
面板插槽組件等業務通用組件封裝
SKU電商組件封裝
通用邏輯函數封裝
路由緩存問題處理
支付寶第三方支付
day01 Vue3入門
day02 Pinia + Layout
day03 Home + 一級分類
day04 二級分類 + 詳情
day05 登入
day06 購物車 + 支付
day07 會員中心 + 拓展課

//================== Day1-02-認識Vue3
Vue3组合式API体验
通过一个 Counter案例 体验Vue3新引入的组合式API

<script setup>
// Vue3組合式api實現
import { ref } from 'vue'
const count = ref(0)
const addCount = () => count.value++
</script>

<script>
//vue2的代碼 選項式
export default {
  data(){
    return {
      count: 0
    }
  },
  methods:{
    addCount() {
      this.count++
    }
  }
}
</script>

1.代碼量變少 2.分散式維護轉為集中式維護

Vue3更多的優勢
更容易維護：1.組合式API 2.更好的TypeScript支持
更快的速度：1.重寫diff算法 2.模版編譯優化 3.更高效的組件初始化
更小的體積：1.良好的TreeShaking 2.按需引入
更優的數據響應式： Proxy

//================== Day1-03-使用create-vue創建項目
認識create-vue
create-vue是Vue官方新的脚手架工具，底層切換到了 vite（下一代前端工具鏈），為開發发提供極速響應
1. 前提環境條件
	已安裝 16.0 或更高版本的 Node.j   node -v
2. 創建一个Vue應用
	npm init vue@latest 這一指令將會安裝並執行 create-vu
	
	cd vue3-project => npm install => npm run dev

//================== Day1-04-熟悉項目目錄和關鍵文件
關鍵文件：
1. vite.config.js - 項目的配置文件 基于vite的配置
2. package.json - 項目包文件 核心依賴項變成了 Vue3.x 和 vite
3. main.js - 入口文件 createApp函數創建應用實例
4. app.vue - 根組件 SFC單文件组件 script - template - style
	變化一：脚本script和模板template順序調整
	變化二：模板template不再要求唯一根元素
	變化三：脚本script添加setup標識支持組合式API
5. index.html - 單頁入口 提供id為app的掛載點

	 // 開關：容許在Script書寫組合式API
	<script setup>

	// 不再要求唯一根元素 <div>


//================== Day1-05-組合式PI入口-setup
setup選項的寫法和執行時機
	setup是在beforeCreate之前執行的
	
	// APP.vue
	script>
	export default{
		setup(){
		 console.log('setup')
		 const message = 'this is message'
		 const logMessage = () => {
		  console.log(message)
		 }
		 return {  // 必須return才可以叫得到
			message,
			logMessage
		 }
		},
		beforeCreate(){
		 console.log('beforeCreate')
		}
	}
	script/>
	<template>
		<div>This is div</div>
		{{ message }}
		<button @click="logMessage"> log </button>
	</template>

======== 語法糖 script setup>  ==> 不需要return了

	script setup>
		const message = 'this is message'
		const logMessage = () => {
		 console.log(message)
		}
	script/>
	<template>
		<div>This is div</div>
		{{ message }}
		<button @click="logMessage"> log </button>
	</template>

//================== Day1-06-組合式API-reactive和ref函數

------------reactive()
作用：接受對象類型數據参数，傳入並返回一個響應式的對象
核心步驟：
1. 從 vue 包中導入reactive函數
2. 在 script setup> 中執行 reactive函數，並傳入類型為對象的初始值，並使用變量接收返回值

script setup>
//1.導入函數
import { reactive } from 'vue'
//2.執行函數 傳入一個對象類型的參數 變量接收
const state = reactive({
	count: 0
})
const setCount = () => {
 state.count++
}
script/>
template>
 div>
  button @click="setCount">{{state.count}}button/>
 /div>
/template>

------------ref()
作用：接收簡單類型或者對象類型的數據傳入並返回一个響應式的對象
核心步驟：
1. 從 vue 包中導入reactive函數
2. 在 script setup> 中執行 ref 函数，並傳入初始值，使用變量接收 ref 函數的返回值

script setup>
//1.導入ref函數
import { ref } from 'vue'
//2.執行函數 傳入一個參數[簡單類型 + 對象類型] 變量接收
const count = ref(0)
console.log(count)
const setCount = () => {
 count.value++
}
script/>
template>
 div>
  button @click="setCount">{{ count }}button/>
 /div>
/template>


//在實際工作中推薦使用ref函數，更加靈活，小兔鮮項目主用ref

        //================== Day1-07-組合式API-computed
         computed計算属性函數
          計算屬性基本思想和Vue2的完全一致，組合式API下的計算属性只是修改了寫法
          核心步驟：1. 導入computed函數
                   2. 執行函數 在回調參數中return基於響應式數據做計算的值，用變量接收

            script setup>
            // 原始響應式數組
            // 1. 導入computed
            import { ref, computed } from 'vue'
            const list = ref([1,2,3,4,5,6,7,8])
            // 2. 執行函數 return 計算之後的值 變量接收
            const computedList = computed(() => {
              return list.value.filer(item => item > 2)
            })

            setInterval(()=> {
              list.value.push(9,10)
            }, 3000)
            /script>
            template>
              div>
                原始響應式數組 - {{ list }}
              /div>
              div>
                計算屬性數組 - {{ computedList }}
              /div>
            /template>

            // 最佳實踐
              1.計算屬性中不應該有 "副作用"
               比如異步請求/修改dom
              2.避免直接修改計算屬性的值(只讀)

//================== Day1-08-組合式API-watch-基本使用和立即執行

          watch函数
          作用: 偵聽一個或者多個數據的變化，數據變化時執行回調函數
          兩個額外參數：1. immediate（立即執行） 2. deep（深度偵聽）

          script setup>
            //1.導入watch
            import { ref, watch } from 'vue'
            const count = ref(0)
            const setCount = () => {
              count.value++
            }

            //2.調用watch 偵聽變化
              // ref對象不需要加.value
            watch(count, (newValue, oldValue) => {
              console.log(`count發生變化，老值為${oldValue}, 新值為${newValue}`)
            })
          /script>
          template>
            div>
              button @click="setCount">{{ count }} /button>
            /div>
          /template>


          ---- 基礎使用 - 偵聽多個數據
            說明：同時偵聽多個響應式數據的變化，不管哪個數據變化，都需要執行回調

            script setup>
            //1.導入watch
            import { ref, watch } from 'vue'

            const count = ref(0)
            const setCount = () => {
              count.value++
            }

            const name = ref('cp')
            const setName = () => {
              name.value = 'pc'
            }

            //2.調用watch 偵聽變化
              // ref對象不需要加.value
            watch([count, name], (
                [newCount, newName],
                [oldCount, oldName]
              ) => {
              console.log(count或者name發生變化了, [newCount, newName],[oldCount, oldName])
            })
          /script>
          template>
            div>
              button @click="setCount">修改count -- {{ count }} /button>
            /div>
            div>
            button @click="setName">修改name -- {{ name }} /button>
          /div>
          /template>


          //immediate
          說明：在偵聽器創建時立即觸發回調, 響應式數據變化之後繼續執行回調

          watch(count, () => {
            console.log('count發生變化')
          }, { 
            immediate: true
          })


          script setup>
            // 1. 導入watch
            import { ref, watch } from 'vue'
            const count = ref(0)
            // 2. 調用watch 偵聽變化
            watch(count, (newValue, oldValue)=>{
              console.log(`count發生了變化，老值為${oldValue},新值為${newValue}`)
            },{
              immediate: true  // 
            })
          /script>
		  
		  
//================== Day1-09-組合式API-watch-深度偵聽和精確偵聽
        deep
        默認機制：通過watch監聽的ref對象，默認是淺層偵聽的，直接修改嵌套的對象属性，不會觸發回調執行，需要開啟deep
        選項

        script setup>
          // 1. 導入watch
          import { ref, watch } from 'vue'
          const state = ref({ count: 0, age: 20 }) // 對象
          // 2. 監聽對象state 並開啟deep
          watch(state, ()=>{
            console.log('數據變化了')
          },{deep:true})

          const changeStateByCount = ()=>{
            // 此時修改可以觸發回調
            state.value.count++
          }
        /script>
        template>
          {{ state.count }}
          div>
          button @click="changeStateByCount">通過count修改 /button>
        /div>
        /template>


        ---精確偵聽對象的某個屬性
        需求：在不開啟deep的前提下，偵聽age的變化，只有age變化時才執行回調
          watch(
            ()=> state.value.age,
            ()=>{
              console.log('age變化了')
            }
          )

          // deep性能損秏 盡量不開啟deep

//================== 
//================== 
//================== 
//================== 
//================== 
//================== 
//================== 
//================== 
//================== 
//================== 
//================== 
//================== 
//================== 
//================== 
# elementPlus引入
## 1. 安装elementPlus和自动导入插件

  這個會有問題//npm i elementPlus  要執行這個// npm install element-plus --save --legacy-peer-deps
npm install element-plus --save
npm install -D unplugin-vue-components unplugin-auto-import

//安裝錯誤，搜尋到的解法 https://wenku.csdn.net/answer/45gmngb29c?ydreferer=aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS8%3D


//配置 vite.config.js
// elementPlus按需導入
import AutoImport from 'unplugin-auto-import/vite'
import Components from 'unplugin-vue-components/vite'
import { ElementPlusResolver } from 'unplugin-vue-components/resolvers'


export default defineConfig({
  plugins: [
    vue(),
    // 配置插件
    AutoImport({
      resolvers: [ElementPlusResolver()],
    }),
    Components({
      resolvers:[
        //1.配置elementPlus採用sass樣式配它系統
        ElementPlusResolver({importStyle:"sass"}),
      ]
    })
  ],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url))
    }
  }
})


//--------------------
如何定制 (SCSS 變量替換方案)
1.安裝SCSS   				npm i sass -D
2.準備定制樣式文件	 			styles/element/index.scss
3.對ElementPlus樣式進行覆蓋  	通知Element採用scss語言 -> 導入定制SCSS文件覆蓋

新增目錄
src\styles\element
新增檔案 index.scss
//-----------------------------
/* 只需要重寫你需要的即可 */
@forward 'element-plus/theme-chalk/src/common/var.scss' with (
  $colors: (
    'primary': (
      // 主色
      'base': #27ba9b,
    ),
    'success': (
      // 成功色
      'base': #1dc779,
    ),
    'warning': (
      // 警告色
      'base': #ffb302,
    ),
    'danger': (
      // 危險色
      'base': #e26237,
    ),
    'error': (
      // 錯誤色
      'base': #cf4444,
    ),
  )
)
//-----------------------------
再把common.scss, var.scss 複製到styles底下
//vite.config.js
//---------------------------
  css: {
    preprocessorOptions: {
      scss: {
        // 自动导入定制化样式文件进行样式覆盖
        additionalData: `
          @use "@/styles/element/index.scss" as *;
          @use "@/styles/var.scss" as *;
        `,
      }
    }
  }
 //---------------------------

//==================Day2-09-項目起步-axios基礎配置
1.安裝axios    npm i axios
2.配置基礎實例(統一接口配)

在src底下建立一個utils/http.js
//-----------------------------------------
// axios 基礎的封裝
import axios from 'axios'
import { ElMessage } from 'element-plus'
import 'element-plus/theme-chalk/el-message.css'
//import { useUserStore } from '@/stores/userStore'
import router from '@/router'

const httpInstance = axios.create({
 baseURL:'https://pcapi-xiaotuxian-front-devtest.itheima.net',
 timeout: 5000
})

// 攔截器
// axios请求攔截器
httpInstance.interceptors.request.use(config => {
	//1.從pinia獲取token數據
	//const userStore = useUserStore()
	//2.按照後端的要求拼接token數據
	//const token = userStore.userInfo.token
	// console.log(token)
	//if(token){
	//	config.headers.Authorization = `Bearer ${token}`
	//}
	return config
}, e => Promise.reject(e))
  
// axios響應式攔截器
httpInstance.interceptors.response.use(res => res.data, e => {
	//const userStore = useUserStore()
	// 統一錯誤提示
	//ElMessage({
	//		type:'warning',
	//		message: e.response.data.message
	//})
	// 401token失效處理
	// 1.清除本地用戶數據
	// 2.跳轉到登入頁
	//if(e.response.status === 401){
	//	userStore.clearUserInfo()
	//	router.push('/login')
	//}
	return Promise.reject(e)
})

export default httpInstance
//--------------------------------

// 測試axios
建立src\apis\testAPI.js

//--------------------------------
import httpInstance from "@/utils/http";

export function getCategory(){
    return httpInstance({
        url: 'home/category/head'
    })
}
//--------------------------------
main.js
//--------------------------------
// 測試接口函數
import {getCategory} from '@/apis/testAPI'
getCategory().then(res => {
   console.log(res)
})
//--------------------------------


//==================Day2-10-項目起步-項目整體路由設計
// eslint比較嚴，需要配置eslintrc.cjs
//.eslintrc.cjs
/* eslint-env node */
module.exports = {
  root: true,
  'extends': [
    'plugin:vue/vue3-essential',
    'eslint:recommended'
  ],
  parserOptions: {
    ecmaVersion: 'latest'
  },
  rules:{
    "vue/multi-word-component-names": ["error", {
      "ignores": []
    }]
  }
}

//router\index.js
//createRouter: 創建router實例對象
//createWebHistory: 創建history模式的路由

   配置一級路由，二級路由
   Layout \ Home
		  \ Category

//==================Day2-11-項目起步-靜態資源引入和ErrorLen安裝

圖片資源和樣式資源
資源说明
1. 實際工作中的圖片資源通常由 UI設計師 提供，常見的圖片格式有png,svg等都是由UI切圖交给前端
2. 樣式資源通常是指項目初始化的時候進行樣式重置，常見的比如開源的 normalize.css 或者手寫
資源操作
1. 圖片資源 - 把 images 文件夾放到 assets 目錄下
2. 樣式資源 - 把 common.scss 文件放到 styles 目錄下

// 引入初始化樣式文件 main.js
	import '@/styles/common.scss'


error lens 安裝
error lens是一個實時提供錯誤警告信息的VSCode插件，方便開發

//================== Day2-12-項目起步-scss文件的自動導入
為什麼要自動導入
在項目裡一些組件共享的色值會以scss變量的方式統一放到一个名為 var.scss 的文件中，正常組件中使用，需要先導
入scss文件，再使用内部的變量，比較繁索，自動導入可以免去手動導入的步驟，直接使用内部的變量

自動導入配置
1. 新增一個 var.scss 文件，存入色值變量
2. 通過 vite.config.js 配置動導入文


//自動導入var.scss
// vite.config.js
  css: {
    preprocessorOptions: {
      scss: {
        // 自動導入定制化樣式文件進行樣式覆盖
        additionalData: `
          @use "@/styles/element/index.scss" as *;
          @use "@/styles/var.scss" as *;
        `,
      }
    }
  }

<style scoped lang="scss">
.test{
  color: $priceColor;
}

//================== Day2-13-Layout-靜態模版結構搭建